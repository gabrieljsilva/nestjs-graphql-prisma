//# ------------------------------------------------------
//# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//# ------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credentials {
  id       String            @id @default(uuid())
  email    String            @unique
  password String
  user     User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String            @unique
  status   CredentialsStatus
  roles    Role[]            @relation("credentials_has_roles")
  tokens   Token[]

  @@map("credentials")
}

enum CredentialsStatus {
  ACTIVE
  INACTIVE
  WAITING_CONFIRMATION
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  roles Role[] @relation("roles_has_permissions")

  @@map("permissions")
}

model Role {
  id          String        @id @default(uuid())
  name        String        @unique
  credentials Credentials[] @relation("credentials_has_roles")
  permissions Permission[]  @relation("roles_has_permissions")

  @@map("roles")
}

model Token {
  id            String      @id @default(uuid())
  token         String
  credentialsId String
  credentials   Credentials @relation(fields: [credentialsId], references: [id])
  type          TokenType
  status        TokenStatus
  usageAttempts Int         @default(0)

  @@map("tokens")
}

enum TokenStatus {
  UNUSED
  EXPIRED
}

enum TokenType {
  ACCOUNT_CONFIRMATION
}

model User {
  id          String       @id @default(uuid())
  name        String
  credentials Credentials?

  @@map("users")
}
